// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface UIButton (SWIFT_EXTENSION(Vuukle))
@end


@interface UIColor (SWIFT_EXTENSION(Vuukle))
@end


@interface UIDevice (SWIFT_EXTENSION(Vuukle))
@end


@interface UIImage (SWIFT_EXTENSION(Vuukle))
@end


@interface UIImageView (SWIFT_EXTENSION(Vuukle))
@end


@interface UIToolbar (SWIFT_EXTENSION(Vuukle))
@end


@interface UIViewController (SWIFT_EXTENSION(Vuukle))
@end

@class UIScrollView;
@class UIView;
@class NSLayoutConstraint;
@class UIWebView;

SWIFT_CLASS("_TtC6Vuukle17VUCommentsBuilder")
@interface VUCommentsBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  REQUIRED: This method initializes and puts Vuukle Comments to specific UIView You set.
  \param baseVC UIViewController wich contains contentView for comments.

  \param baseScrollView OPTIONAL PARAMETER: If You use nested comments You have to set base UIScrollView.

  \param contentView Vuukle Comments will be added to this UIView as subview.

  \param contentHeightConstraint OPTIONAL PARAMETER: If You use nested comments, You have to set height NSLayoutConstraint of contentView for comments.

  \param vuukleApiKey Set your API key for API. To get API KEY You need:
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see API and secret keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      After signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleSecretKey Set your SecretKey for API. To get SECRET KEY You need:
  <ol>
    <li>
      Sign in to dashboard through <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see api and SECRET keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      after signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleHost This is domain of the publisher’s site(e.g. indianexpress.com, thehindu.com etc.).
  FOR EXAMPLE:
  You are the owner of indianexpress.com and have own app where want’s to setup this library, so when library installed on your app, You should paste domain for ‘host’ property without http:// or https:// or www.

  \param vuukleTimeZone You have to set string with format like “Europe/Kiev”.
  Get your timezone from this resource: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">List of tz database time zones</a>

  \param articleID Get ID from <a href="http://vuukle.com/">vuukle.com</a>. Every article has unique ID.

  \param articleTag Tag of your article, it should be NOT empty string.
  FOR EXAMPLE:
  If You article is about sport news, set this parameter “Sport” etc.

  \param articleTitle Your Article Title, it should be NOT empty string.

  \param articleURL Your Article URL, it should be valide URL and NOT empty string.

  \param isScrollEnabled OPTIONAL PARAMETER: Set “true”, if You want to enable own scroll of comments UITableView.

  \param edgeInserts OPTIONAL PARAMETER: UIEdgeInsets of comments UITableView, default value is UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)/

*/
+ (void)addVuukleCommentsWithBaseVC:(UIViewController * _Nonnull)baseVC baseScrollView:(UIScrollView * _Nullable)baseScrollView contentView:(UIView * _Nonnull)contentView contentHeightConstraint:(NSLayoutConstraint * _Nullable)contentHeightConstraint appName:(NSString * _Nullable)appName appID:(NSString * _Nullable)appID vuukleApiKey:(NSString * _Nonnull)vuukleApiKey vuukleSecretKey:(NSString * _Nonnull)vuukleSecretKey vuukleHost:(NSString * _Nonnull)vuukleHost vuukleTimeZone:(NSString * _Nonnull)vuukleTimeZone articleTitle:(NSString * _Nonnull)articleTitle articleID:(NSString * _Nonnull)articleID articleTag:(NSString * _Nonnull)articleTag articleURL:(NSString * _Nonnull)articleURL isScrollEnabled:(BOOL)isScrollEnabled edgeInserts:(UIEdgeInsets)edgeInserts;
/**
  REQUIRED: You have to call this method in “viewWillAppear” and after rotation.
*/
+ (void)updateAllHeights;
/**
  OPTIONAL: This method initializes and puts Vuukle Emoji to specific UIView You set.
  \param baseVC UIViewController wich contains contentView for Emoji.

  \param emojiContentView Vuukle Emoji will be added to this UIView as subview.

  \param emojiHeightConstraint You have to set height NSLayoutConstraint of contentView for Emoji.

  \param vuukleApiKey Set your API key for API. To get API KEY You need:
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see API and secret keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      After signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleSecretKey Set your SecretKey for API. To get SECRET KEY You need:
  <ol>
    <li>
      Sign in to dashboard through <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see api and SECRET keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      after signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleHost This is domain of the publisher’s site(e.g. indianexpress.com, thehindu.com etc.).

  \param articleID Get ID from <a href="http://vuukle.com/">vuukle.com</a>. Every article has unique ID.

  \param articleTitle Your Article Title, it should be NOT empty string.

  \param articleURL Your Article URL, it should be valide URL and NOT empty string.

*/
+ (void)addVuukleEmojiWithBaseVC:(UIViewController * _Nonnull)baseVC emojiContentView:(UIView * _Nonnull)emojiContentView emojiHeightConstraint:(NSLayoutConstraint * _Nonnull)emojiHeightConstraint vuukleApiKey:(NSString * _Nonnull)vuukleApiKey vuukleSecretKey:(NSString * _Nonnull)vuukleSecretKey vuukleHost:(NSString * _Nonnull)vuukleHost articleTitle:(NSString * _Nonnull)articleTitle articleID:(NSString * _Nonnull)articleID articleURL:(NSString * _Nonnull)articleURL;
/**
  OPTIONAL: This method initializes and puts Vuukle TalkOfTheTown to specific UIView You set.
  \param baseVC UIViewController wich contains contentView for TalkOfTheTown.

  \param topArticleContentView Vuukle TalkOfTheTown will be added to this UIView as subview.

  \param topArticleHeightConstraint You have to set height NSLayoutConstraint of contentView for TalkOfTheTown.

  \param vuukleApiKey Set your API key for API. To get API KEY You need:
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see API and secret keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      After signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleSecretKey Set your SecretKey for API. To get SECRET KEY You need:
  <ol>
    <li>
      Sign in to dashboard through <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      Navigate to domain from home page of dashboard (first page after signing in).
    </li>
    <li>
      Choose in menu Integration, then API Docs from the dropdown.
    </li>
    <li>
      Then You will be able to see api and SECRET keys.
    </li>
  </ol>
  — OR —
  <ol>
    <li>
      Sign in to dashboard thouth <a href="http://vuukle.com/">vuukle.com</a>
    </li>
    <li>
      after signing in, in header You can find ‘Integration’ click -> choose API docs in the drop-down.
    </li>
  </ol>

  \param vuukleHost This is domain of the publisher’s site(e.g. indianexpress.com, thehindu.com etc.).
  FOR EXAMPLE:
  You are the owner of indianexpress.com and have own app where want’s to setup this library, so when library installed on your app, You should paste domain for ‘host’ property without http:// or https:// or www.

  \param articleID Get ID from <a href="http://vuukle.com/">vuukle.com</a>. Every article has unique ID.

  \param articleTitle Your Article Title, it should be NOT empty string.

  \param articleURL Your Article URL, it should be valide URL and NOT empty string.

*/
+ (void)addVuukleTalkOfTheTownWithBaseVC:(UIViewController * _Nonnull)baseVC talkContentView:(UIView * _Nonnull)talkContentView talkHeightConstraint:(NSLayoutConstraint * _Nonnull)talkHeightConstraint vuukleApiKey:(NSString * _Nonnull)vuukleApiKey vuukleSecretKey:(NSString * _Nonnull)vuukleSecretKey vuukleHost:(NSString * _Nonnull)vuukleHost articleTitle:(NSString * _Nonnull)articleTitle articleID:(NSString * _Nonnull)articleID articleURL:(NSString * _Nonnull)articleURL;
/**
  OPTIONAL: This method initializes and puts Vuukle Talk of The Town to specific UIView You set.
  \param baseVC UIViewController wich contains contentView for TalkOfTheTown.

  \param addsContentView Vuukle TalkOfTheTown will be added to this UIView as subview.

  \param addsHeightConstraint You have to set height NSLayoutConstraint of contentView for TalkOfTheTown.

  \param appName 

  \param appID 

  \param articleURL Your Article URL, it should be valide URL and NOT empty string.

*/
+ (void)addVuukleAddsWithBaseVC:(UIViewController * _Nonnull)baseVC addsContentView:(UIView * _Nonnull)addsContentView addsHeightConstraint:(NSLayoutConstraint * _Nonnull)addsHeightConstraint appName:(NSString * _Nonnull)appName appID:(NSString * _Nonnull)appID articleURL:(NSString * _Nonnull)articleURL;
/**
  OPTIONAL: You can hide Vuukle Adds
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isVuukleAdsHiden;)
+ (BOOL)isVuukleAdsHiden;
+ (void)setIsVuukleAdsHiden:(BOOL)newValue;
/**
  OPTIONAL: You can hide Vuukle Emoji.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isEmojiVotingHiden;)
+ (BOOL)isEmojiVotingHiden;
+ (void)setIsEmojiVotingHiden:(BOOL)newValue;
/**
  OPTIONAL: You can change comments pagination (in range 0 to 40, default value is 10).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger commentPagination;)
+ (NSInteger)commentPagination;
+ (void)setCommentPagination:(NSInteger)newValue;
/**
  OPTIONAL: You can hide “Talk of the Town” articles.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isTalkOfTheTownHiden;)
+ (BOOL)isTalkOfTheTownHiden;
+ (void)setIsTalkOfTheTownHiden:(BOOL)newValue;
/**
  OPTIONAL: You can change the count of displayed “Talk of the Town” articles (in range 1 to 20, default value is 6).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger talkOfTheTownCount;)
+ (NSInteger)talkOfTheTownCount;
+ (void)setTalkOfTheTownCount:(NSInteger)newValue;
/**
  OPTIONAL: You can change the count of hours for which the “Talk of the Town” articles are shown (in range 12 to 240 hours, default value is 24 hours).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger talkOfTheTownHours;)
+ (NSInteger)talkOfTheTownHours;
+ (void)setTalkOfTheTownHours:(NSInteger)newValue;
/**
  OPTIONAL: If you use nested comments with UIWebView, framework can load URL and manage height of this UIWebView depending of content size.
  <ul>
    <li>
      parameters:
    </li>
    <li>
      stringURL: String with contains URL address of page you need.
    </li>
    <li>
      webView: UIWebView with should load URL address.
    </li>
    <li>
      webViewHieghtConstraint: You have to set height NSLayoutConstraint of your UIWebView.
    </li>
  </ul>
*/
+ (void)loadVuukleURL:(NSString * _Nonnull)stringURL webView:(UIWebView * _Nonnull)webView webViewHieghtConstraint:(NSLayoutConstraint * _Nonnull)webViewHieghtConstraint;
/**
  OPTIONAL: If you need, this method can manage height of your UIWebView depending of content size.
*/
+ (void)updateWebViewHeightWithWebView:(UIWebView * _Nonnull)webView heightConstraint:(NSLayoutConstraint * _Nonnull)heightConstraint;
/**
  DESIGN: This methods will update all colors of framework.
*/
+ (void)updateDesingColors;
@end

#pragma clang diagnostic pop
